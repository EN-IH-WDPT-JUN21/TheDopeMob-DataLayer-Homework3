package com.ironhack.data;

import com.ironhack.dao.Account;
import com.ironhack.dao.Contact;
import com.ironhack.dao.Lead;
import com.google.gson.Gson;
import com.ironhack.dao.Opportunity;


import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public abstract class DatabaseManager {

    //Names for database files, they're not final because JUnit tests are changing it so they won't delete the production data
    private static String LEADS_DB_PATH = "src/main/java/com/ironhack/databases/leads.json";
    private static String CONTACTS_DB_PATH = "src/main/java/com/ironhack/databases/contacts.json";
    private static String OPPORTUNITIES_DB_PATH = "src/main/java/com/ironhack/databases/opportunities.json";
    private static String ACCOUNTS_DB_PATH = "src/main/java/com/ironhack/databases/accounts.json";

    //Main objects of this class, they hold the data
    private static final ArrayList<Lead> leads = new ArrayList<>();
    private static final ArrayList<Contact> contacts = new ArrayList<>();
    private static final ArrayList<Opportunity> opportunities = new ArrayList<>();
    private static final ArrayList<Account> accounts = new ArrayList<>();

    //Autogenerated code
    public static ArrayList<Lead> getLeads() {
        return leads;
    }
    public static ArrayList<Contact> getContacts() {
        return contacts;
    }
    public static ArrayList<Opportunity> getOpportunities() {
        return opportunities;
    }
    public static ArrayList<Account> getAccounts() {return accounts;}
    public static String getLeadsDbPath() {
        return LEADS_DB_PATH;
    }
    public static String getOpportunitiesDbPath() {
        return OPPORTUNITIES_DB_PATH;
    }
    public static String getContactsDbPath() {
        return CONTACTS_DB_PATH;
    }
    public static String getAccountsDbPath() {return ACCOUNTS_DB_PATH;}

    //Setters are needed for switching to test database, in production code it won't be used
    public static void setLeadsDbPath(String leadsDbPath) {
        LEADS_DB_PATH = leadsDbPath;
    }
    public static void setContactsDbPath(String contactsDbPath) {
        CONTACTS_DB_PATH = contactsDbPath;
    }
    public static void setOpportunitiesDbPath(String opportunitiesDbPath) {
        OPPORTUNITIES_DB_PATH = opportunitiesDbPath;
    }
    public static void setAccountsDbPath(String accountsDbPath){ACCOUNTS_DB_PATH = accountsDbPath;}

    //Takes the data from ArrayList objects and saves them to the files specified in the DB_PATHS variables.
    public static void save() {
        //saveDB can generate IOException
        try{
            saveDB(LEADS_DB_PATH, leads);
            saveDB(CONTACTS_DB_PATH, contacts);
            saveDB(OPPORTUNITIES_DB_PATH, opportunities);
            saveDB(ACCOUNTS_DB_PATH, accounts);
        } catch (IOException e) {
            System.err.println("Failed to save database");
        }
    }
    //Simple method to clear all data from objects, used in tests
    public static void reset(){
        leads.clear();
        contacts.clear();
        opportunities.clear();
        accounts.clear();
    }
    //This is the most low-level method in this class, it tries to save the object as a json to the specified file. Uses GSON Lib.
    private static void appendFile(File file, Object content) throws IOException {
            Gson gson = new Gson();
            FileWriter fw = new FileWriter(file);
            fw.append(gson.toJson(content));
            fw.close();
    }
    //Intermediate method used in save() method. Sets up the env. for the low-level appendFile method.
    private static void saveDB(String filePath, Object content) throws IOException {
        File file = new File(filePath);
        if (file.exists()){ appendFile(file, content); }
        else{
            if (!file.createNewFile()) {throw new IOException("Can't create DB file!");}
            else {
                appendFile(file, content);}
        }
    }
    //A wrapper method for low-level loadDB method, executes loadDB for each ArrayList object
    public static void load() {
        try{
            loadDB(LEADS_DB_PATH, leads, new Lead[]{});
            loadDB(CONTACTS_DB_PATH, contacts, new Contact[]{});
            loadDB(OPPORTUNITIES_DB_PATH, opportunities, new Opportunity[]{});
            loadDB(ACCOUNTS_DB_PATH, accounts, new Account[]{});
        } catch (IOException e) {
            System.err.println("Unable to load databases");
        }

    }
    //Low level method, reads the content of the specified file and tries to convert it using GSON lib to a object of type dbType. More comments inside.
    private static void loadDB(String filePath, ArrayList destination, Object[] dbType) throws IOException {
        File dbFile = new File(filePath);
        //if the file doesn't exist, creates a new one, if it does it trying to read it
        if (dbFile.exists()){
            Scanner scn = new Scanner(dbFile);
            //in case the content in the file was formatted the code loop through each line and build a one long string
            StringBuilder content = new StringBuilder();
            while (scn.hasNext()){
                content.append(scn.nextLine());
            }
            //Converting string with json data to JAVA object of specified type dbType
            Gson gson = new Gson();
            //The hearth of this method, here the conversion is happening
            dbType = gson.fromJson(content.toString(),dbType.getClass());
            destination.clear();
            //This is a security feature, because addAll throws an exception if the content is empty
            if (content.length()!=0){
                destination.addAll(Arrays.asList(dbType));
            }
        }
        //File not fount, creating a new one, if it cannot create a file, throws an exception
        else{if (!dbFile.createNewFile()){throw new IOException("Can't create DB file!");}}
    }

    // Leads methods
    public static void addLead(Lead lead) {
        leads.add(lead);
    }
    public static int findLastLeadId() {
        if(leads.isEmpty()) {
            return 1;
        } else {
            return leads.get(leads.size() - 1).getId() + 1;
        }
    }
    public static Lead findLeadById(int id) throws IllegalArgumentException {
        for (Lead lead : leads) {
            if(lead.getId() == id) {
                return lead;
            }
        }
        throw new IllegalArgumentException("No lead matching provided id");
    }
    public static void convertLead(int product, int quantity, Contact decisionMaker) {

        Opportunity opportunity = new Opportunity(product, quantity, decisionMaker);
        //Add the new contact and opportunity to the database
        contacts.add(decisionMaker);
        opportunities.add(opportunity);
        //save the database
        save();
        System.out.println("Lead successfully converted");

    }

    // Opportunity methods
    public static Opportunity findOpportunityById(int id) throws IllegalArgumentException {
        for (Opportunity opportunity : opportunities) {
            if(opportunity.getId() == id) {
                return opportunity;
            }
        }
        throw new IllegalArgumentException("No opportunity matching provided id");
    }
    public static int findLastOpportunityId() {
        if(opportunities.isEmpty()) {
            return 1;
        } else {
            return opportunities.get(opportunities.size() - 1).getId() + 1;
        }
    }

    // Account methods
    public static void createAccount(Long industry, int employeeCount, String city, String country) {
        Account account = new Account(industry, employeeCount, city, country);
        account.addContactToList(contacts.get(contacts.size() - 1));
        account.addOpportunityToList(opportunities.get(opportunities.size() - 1));
        accounts.add(account);
        save();
        System.out.println("Account created successfully");
    }
    public static int findLastAccountId() {
        if(accounts.isEmpty()) return 1;
        else return opportunities.get(opportunities.size() -1).getId() + 1;
    }
    public static Account findAccountByOpportunityId(int id) {
        Account foundAccount = null;
        for (Account account : accounts) {
            for (Opportunity opportunity : opportunities) {
                if (opportunity.getId() == id) foundAccount = account;
            }
        }
        return foundAccount;
    }
}
